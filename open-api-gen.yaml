openapi: 3.0.0
info:
  title: Event Ticketing API
  version: 1.0.0
  description: API for managing users, events, locations, seats, and tickets.

servers:
  - url: http://localhost:8000/

paths:
  /auth/user/login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login successful

  /auth/admin/login:
    post:
      summary: Admin login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login successful

  /users:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: User created

  /admins:
    post:
      summary: Register a new admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Admin"
      responses:
        "201":
          description: Admin created

  /:
    get:
      summary: Get all events
      responses:
        "200":
          description: List of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EventListItemResponse"

  /create-event:
    post:
      summary: Create a new event
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - title
                - description
                - start_date_time
                - end_date_time
                - admin_id
                - thumbnail
              properties:
                title:
                  type: string
                description:
                  type: string
                start_date_time:
                  type: string
                  format: date-time
                end_date_time:
                  type: string
                  format: date-time
                admin_id:
                  type: integer
                thumbnail:
                  type: string
                  format: binary
      responses:
        "201":
          description: Event created

  /events/{eventId}:
    get:
      summary: Get event by ID
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Event details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventResponse"
    put:
      summary: Update event
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - title
                - description
                - start_date_time
                - end_date_time
                - admin_id
              properties:
                title:
                  type: string
                description:
                  type: string
                start_date_time:
                  type: string
                  format: date-time
                end_date_time:
                  type: string
                  format: date-time
                admin_id:
                  type: integer
                thumbnail:
                  type: string
                  format: binary
      responses:
        "200":
          description: Event updated
    delete:
      summary: Delete event
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Event deleted

  /locations:
    post:
      summary: Add a location to an event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Location"
      responses:
        "201":
          description: Location created

  /locations/by-event/{eventId}:
    get:
      summary: Get all locations for a specific event
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Locations list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LocationWithId"

  /cities:
    post:
      summary: Add a new city
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/City"
      responses:
        "201":
          description: City created

    get:
      summary: Get all cities
      responses:
        "200":
          description: List of cities
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/City"

  /seats:
    post:
      summary: Add seats to a location
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Seat"
      responses:
        "201":
          description: Seats created

  /seats/by-location/{locationId}:
    get:
      summary: Get seats for a location
      parameters:
        - name: locationId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Seat list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SeatWithId"

  /tickets:
    post:
      summary: Book a ticket
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Ticket"
      responses:
        "201":
          description: Ticket booked

  /tickets/{ticketId}:
    delete:
      summary: Cancel a ticket
      parameters:
        - name: ticketId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Ticket cancelled

components:
  schemas:
    LoginRequest:
      type: object
      required: [username, password]
      properties:
        username:
          type: string
        password:
          type: string

    User:
      type: object
      required: [username, name, email, phone, password]
      properties:
        username:
          type: string
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        password:
          type: string

    Admin:
      type: object
      required: [username, name, email, phone, password]
      properties:
        username:
          type: string
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        password:
          type: string

    Event:
      type: object
      required:
        - title
        - description
        - start_date_time
        - end_date_time
        - admin_id
        - thumbnail
      properties:
        title:
          type: string
        description:
          type: string
        start_date_time:
          type: string
          format: date-time
        end_date_time:
          type: string
          format: date-time
        admin_id:
          type: integer
        thumbnail:
          type: string
          format: binary
          description: Image file to upload as thumbnail

    EventResponse:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        start_date_time:
          type: string
          format: date-time
        end_date_time:
          type: string
          format: date-time
        admin_id:
          type: integer
        thumbnail:
          type: string
          description: Relative path to thumbnail image (e.g., thumbnails/filename.jpg)

    EventListItemResponse:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        start_date_time:
          type: string
          format: date-time
        end_date_time:
          type: string
          format: date-time
        admin_id:
          type: integer
        thumbnail:
          type: string
          description: Relative path to thumbnail image (e.g., thumbnails/filename.jpg)

    City:
      type: object
      required: [state, city, event_id]
      properties:
        id:
          type: integer
        state:
          type: string
        city:
          type: string
        event_id:
          type: integer

    Location:
      type: object
      required: [building_name, city_id, event_id, available_seats]
      properties:
        building_name:
          type: string
        city_id:
          type: integer
        event_id:
          type: integer
        available_seats:
          type: integer

    LocationWithId:
      type: object
      properties:
        id:
          type: integer
        building_name:
          type: string
        city_id:
          type: integer
        event_id:
          type: integer
        available_seats:
          type: integer
        city:
          $ref: "#/components/schemas/City"

    Seat:
      type: object
      required: [location_id, seat_number, category]
      properties:
        location_id:
          type: integer
        seat_number:
          type: string
        category:
          type: string
        is_booked:
          type: boolean

    SeatWithId:
      type: object
      properties:
        id:
          type: integer
        location_id:
          type: integer
        seat_number:
          type: string
        category:
          type: string
        is_booked:
          type: boolean

    Ticket:
      type: object
      required: [user_id, event_id, seat_id, booked_at, status]
      properties:
        user_id:
          type: integer
        event_id:
          type: integer
        seat_id:
          type: integer
        booked_at:
          type: string
          format: date-time
        status:
          type: string
          enum: [booked, cancelled, pending]
